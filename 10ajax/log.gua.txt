10:14:03 完整请求
10:14:03 请求结束
10:14:03 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:14:03 path and query /weibo/index {} 
10:14:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:14:03 完整请求
10:14:03 请求结束
10:14:03 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:14:03 path and query /static {'file': 'gua.js'} 
10:14:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
10:14:03 完整请求
10:14:03 请求结束
10:14:03 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:14:03 path and query /static {'file': 'weibo.js'} 
10:14:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var b=e('.comment-form')
    log(b)
    // b.addEventListener('click',function (event) {
    //     log('aaa')
    // })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:14:03 完整请求
10:14:03 请求结束
10:14:03 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:14:03 path and query /api/weibo/all {} 
10:14:03 kwargs,  {'weibo_id': 1} <class 'dict'>
10:14:03 kwargs,  {'weibo_id': 2} <class 'dict'>
10:14:03 kwargs,  {'weibo_id': 3} <class 'dict'>
10:14:03 kwargs,  {'weibo_id': 4} <class 'dict'>
10:14:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:14:11 完整请求
10:14:11 请求结束
10:20:21 完整请求
10:20:21 请求结束
10:20:21 cookie ['']
10:20:21 path and query /favicon.ico {} 
10:20:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
10:20:22 完整请求
10:20:22 请求结束
10:20:22 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:22 path and query / {} 
10:20:22 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


10:20:22 完整请求
10:20:23 请求结束
10:20:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:23 path and query /todo/index {} 
10:20:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

10:20:23 完整请求
10:20:23 完整请求
10:20:23 请求结束
10:20:23 请求结束
10:20:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:23 path and query /static {'file': 'gua.js'} 
10:20:23 path and query /static {'file': 'todo.js'} 
10:20:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:20:23 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
10:20:23 完整请求
10:20:23 请求结束
10:20:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:23 path and query /api/todo/all {} 
10:20:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  }
]
10:20:31 完整请求
10:20:31 请求结束
10:20:31 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:31 path and query /weibo/index {} 
10:20:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:20:31 完整请求
10:20:31 请求结束
10:20:31 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:31 path and query /static {'file': 'gua.js'} 
10:20:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:20:31 完整请求
10:20:31 请求结束
10:20:31 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:31 path and query /static {'file': 'weibo.js'} 
10:20:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var b=e('.comment-form')
    log(b)
    // b.addEventListener('click',function (event) {
    //     log('aaa')
    // })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:20:32 完整请求
10:20:32 请求结束
10:20:32 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:20:32 path and query /api/weibo/all {} 
10:20:32 kwargs,  {'weibo_id': 1} <class 'dict'>
10:20:32 kwargs,  {'weibo_id': 2} <class 'dict'>
10:20:32 kwargs,  {'weibo_id': 3} <class 'dict'>
10:20:32 kwargs,  {'weibo_id': 4} <class 'dict'>
10:20:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:20:41 完整请求
10:20:41 请求结束
10:21:26 完整请求
10:21:26 请求结束
10:21:26 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:21:26 path and query /weibo/index {} 
10:21:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:21:26 完整请求
10:21:26 请求结束
10:21:26 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:21:26 path and query /static {'file': 'gua.js'} 
10:21:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:21:27 完整请求
10:21:27 请求结束
10:21:27 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:21:27 path and query /static {'file': 'weibo.js'} 
10:21:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var b=e('.comment-form')
    log(b)
    b.addEventListener('click',function (event) {
        log('aaa')
    })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:21:27 完整请求
10:21:27 请求结束
10:21:27 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:21:27 path and query /api/weibo/all {} 
10:21:27 kwargs,  {'weibo_id': 1} <class 'dict'>
10:21:27 kwargs,  {'weibo_id': 2} <class 'dict'>
10:21:27 kwargs,  {'weibo_id': 3} <class 'dict'>
10:21:27 kwargs,  {'weibo_id': 4} <class 'dict'>
10:21:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:21:31 完整请求
10:21:31 请求结束
10:22:10 完整请求
10:22:10 请求结束
10:22:10 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:22:10 path and query /api/weibo/add {} {"content":""}
10:22:10 kwargs,  {'weibo_id': 5} <class 'dict'>
10:22:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "",
  "comments": []
}
10:22:11 完整请求
10:22:11 请求结束
10:22:17 完整请求
10:22:17 请求结束
10:22:17 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:22:17 path and query /api/weibo/update {} {"id":"5","content":""}
10:22:17 kwargs,  {'id': 5} <class 'dict'>
10:22:17 debug 4
10:22:17 kwargs,  {'weibo_id': 5} <class 'dict'>
10:22:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "",
  "comments": []
}
10:22:19 完整请求
10:22:19 请求结束
10:22:19 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:22:19 path and query /api/weibo/delete {'id': '5'} 
10:22:19 kwargs,  {'weibo_id': 5} <class 'dict'>
10:22:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "",
  "comments": []
}
10:25:05 完整请求
10:25:05 请求结束
10:25:05 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:25:05 path and query /weibo/index {} 
10:25:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:25:05 完整请求
10:25:05 请求结束
10:25:05 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:25:05 path and query /static {'file': 'gua.js'} 
10:25:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:25:05 完整请求
10:25:05 请求结束
10:25:05 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:25:05 path and query /static {'file': 'weibo.js'} 
10:25:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  b=e('.comment-form')
    b.addEventListener('click',function (event) {
        log('aaa')
    })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:25:06 完整请求
10:25:06 请求结束
10:25:06 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:25:06 path and query /api/weibo/all {} 
10:25:06 kwargs,  {'weibo_id': 1} <class 'dict'>
10:25:06 kwargs,  {'weibo_id': 2} <class 'dict'>
10:25:06 kwargs,  {'weibo_id': 3} <class 'dict'>
10:25:06 kwargs,  {'weibo_id': 4} <class 'dict'>
10:25:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:25:11 完整请求
10:25:11 请求结束
10:32:38 完整请求
10:32:38 请求结束
10:32:38 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:32:38 path and query /weibo/index {} 
10:32:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:32:38 完整请求
10:32:38 请求结束
10:32:38 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:32:38 path and query /static {'file': 'gua.js'} 
10:32:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:32:39 完整请求
10:32:39 请求结束
10:32:39 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:32:39 path and query /static {'file': 'weibo.js'} 
10:32:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:32:39 完整请求
10:32:39 请求结束
10:32:39 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:32:39 path and query /api/weibo/all {} 
10:32:39 kwargs,  {'weibo_id': 1} <class 'dict'>
10:32:39 kwargs,  {'weibo_id': 2} <class 'dict'>
10:32:39 kwargs,  {'weibo_id': 3} <class 'dict'>
10:32:39 kwargs,  {'weibo_id': 4} <class 'dict'>
10:32:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:32:41 完整请求
10:32:41 请求结束
10:35:35 完整请求
10:35:35 请求结束
10:35:35 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:35:35 path and query /weibo/index {} 
10:35:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:35:35 完整请求
10:35:35 请求结束
10:35:35 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:35:35 path and query /static {'file': 'gua.js'} 
10:35:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:35:35 完整请求
10:35:35 请求结束
10:35:35 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:35:35 path and query /static {'file': 'weibo.js'} 
10:35:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    log(commentList.name)
    // commentList.addEventListener('click',function (event) {
    //     log('aaa')
    // })

}


//
// var bindEventTodoDelete = function() {
//     var todoList = e('.todo-list')
//     // 注意, 第二个参数可以直接给出定义函数
//     todoList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('todo-delete')){
//             // 删除这个 todo
//             var todoCell = self.parentElement
//             var todo_id = todoCell.dataset.id
//             apiTodoDelete(todo_id, function(r){
//                 log('删除成功', todo_id)
//                 todoCell.remove()
//             })
//         }
//     })
// }

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    // bindEventCommentDelete()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:35:35 完整请求
10:35:35 请求结束
10:35:35 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:35:35 path and query /api/weibo/all {} 
10:35:35 kwargs,  {'weibo_id': 1} <class 'dict'>
10:35:35 kwargs,  {'weibo_id': 2} <class 'dict'>
10:35:35 kwargs,  {'weibo_id': 3} <class 'dict'>
10:35:35 kwargs,  {'weibo_id': 4} <class 'dict'>
10:35:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:35:36 完整请求
10:35:36 请求结束
10:38:43 完整请求
10:38:43 请求结束
10:38:43 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:38:43 path and query /weibo/index {} 
10:38:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:38:43 完整请求
10:38:43 请求结束
10:38:43 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:38:43 path and query /static {'file': 'gua.js'} 
10:38:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:38:44 完整请求
10:38:44 请求结束
10:38:44 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:38:44 path and query /static {'file': 'weibo.js'} 
10:38:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    log(commentList.name)
    // commentList.addEventListener('click',function (event) {
    //     log('aaa')
    // })

}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:38:44 完整请求
10:38:44 请求结束
10:38:44 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:38:44 path and query /api/weibo/all {} 
10:38:44 kwargs,  {'weibo_id': 1} <class 'dict'>
10:38:44 kwargs,  {'weibo_id': 2} <class 'dict'>
10:38:44 kwargs,  {'weibo_id': 3} <class 'dict'>
10:38:44 kwargs,  {'weibo_id': 4} <class 'dict'>
10:38:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
10:38:49 完整请求
10:38:49 请求结束
10:38:49 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:38:49 path and query /api/weibo/add {} {"content":"132313"}
10:38:49 kwargs,  {'weibo_id': 5} <class 'dict'>
10:38:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "132313",
  "comments": []
}
10:39:16 完整请求
10:39:16 请求结束
10:39:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:16 path and query /weibo/index {} 
10:39:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:39:17 完整请求
10:39:17 请求结束
10:39:17 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:17 path and query /static {'file': 'gua.js'} 
10:39:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
10:39:17 完整请求
10:39:17 请求结束
10:39:17 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:17 path and query /static {'file': 'weibo.js'} 
10:39:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    // commentList.addEventListener('click',function (event) {
    //     log('aaa')
    // })

}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

10:39:17 完整请求
10:39:17 请求结束
10:39:17 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:17 path and query /api/weibo/all {} 
10:39:17 kwargs,  {'weibo_id': 1} <class 'dict'>
10:39:17 kwargs,  {'weibo_id': 2} <class 'dict'>
10:39:17 kwargs,  {'weibo_id': 3} <class 'dict'>
10:39:17 kwargs,  {'weibo_id': 4} <class 'dict'>
10:39:17 kwargs,  {'weibo_id': 5} <class 'dict'>
10:39:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  },
  {
    "id": 5,
    "content": "132313",
    "comments": []
  }
]
10:39:20 完整请求
10:39:20 请求结束
10:39:20 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:20 path and query /api/weibo/delete {'id': '5'} 
10:39:20 kwargs,  {'weibo_id': 5} <class 'dict'>
10:39:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "132313",
  "comments": []
}
10:39:23 完整请求
10:39:23 请求结束
10:39:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
10:39:23 path and query /api/weibo/update {} {"id":"4","content":"从苍天处取得闪电,从暴君处取得民权"}
10:39:23 kwargs,  {'id': 4} <class 'dict'>
10:39:23 debug 3
10:39:23 kwargs,  {'weibo_id': 4} <class 'dict'>
10:39:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "从苍天处取得闪电,从暴君处取得民权",
  "comments": []
}
10:39:31 完整请求
10:39:31 请求结束
11:02:33 完整请求
11:02:33 请求结束
11:02:33 cookie ['']
11:02:33 path and query /favicon.ico {} 
11:02:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:02:34 完整请求
11:02:34 请求结束
11:02:34 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:34 path and query / {} 
11:02:34 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


11:02:34 完整请求
11:02:34 请求结束
11:02:34 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:34 path and query /todo/index {} 
11:02:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

11:02:34 完整请求
11:02:34 完整请求
11:02:34 请求结束
11:02:34 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:34 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:34 path and query /static {'file': 'gua.js'} 
11:02:34 path and query /static {'file': 'todo.js'} 
11:02:34 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
11:02:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:02:35 完整请求
11:02:35 请求结束
11:02:35 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:35 path and query /api/todo/all {} 
11:02:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  }
]
11:02:36 完整请求
11:02:36 请求结束
11:02:41 完整请求
11:02:41 请求结束
11:02:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:41 path and query /weibo/index {} 
11:02:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:02:41 完整请求
11:02:41 请求结束
11:02:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:41 path and query /static {'file': 'gua.js'} 
11:02:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:02:41 完整请求
11:02:41 请求结束
11:02:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:41 path and query /static {'file': 'weibo.js'} 
11:02:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:02:42 完整请求
11:02:42 请求结束
11:02:42 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:42 path and query /api/weibo/all {} 
11:02:42 kwargs,  {'weibo_id': 1} <class 'dict'>
11:02:42 kwargs,  {'weibo_id': 2} <class 'dict'>
11:02:42 kwargs,  {'weibo_id': 3} <class 'dict'>
11:02:42 kwargs,  {'weibo_id': 4} <class 'dict'>
11:02:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:02:44 完整请求
11:02:44 请求结束
11:02:44 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:44 path and query /weibo/index {} 
11:02:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:02:45 完整请求
11:02:45 请求结束
11:02:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:45 path and query /static {'file': 'gua.js'} 
11:02:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:02:45 完整请求
11:02:45 请求结束
11:02:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:45 path and query /static {'file': 'weibo.js'} 
11:02:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:02:45 完整请求
11:02:45 请求结束
11:02:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:45 path and query /api/weibo/all {} 
11:02:45 kwargs,  {'weibo_id': 1} <class 'dict'>
11:02:45 kwargs,  {'weibo_id': 2} <class 'dict'>
11:02:45 kwargs,  {'weibo_id': 3} <class 'dict'>
11:02:45 kwargs,  {'weibo_id': 4} <class 'dict'>
11:02:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:02:46 完整请求
11:02:46 请求结束
11:02:55 完整请求
11:02:55 请求结束
11:02:55 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:02:55 path and query /favicon.ico {} 
11:02:55 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:02:56 完整请求
11:02:56 请求结束
11:08:12 完整请求
11:08:12 请求结束
11:08:12 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:08:12 path and query /weibo/index {} 
11:08:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:08:12 完整请求
11:08:12 请求结束
11:08:12 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:08:12 path and query /static {'file': 'gua.js'} 
11:08:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:08:12 完整请求
11:08:12 请求结束
11:08:12 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:08:12 path and query /static {'file': 'weibo.js'} 
11:08:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:08:13 完整请求
11:08:13 请求结束
11:08:13 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:08:13 path and query /api/weibo/all {} 
11:08:13 kwargs,  {'weibo_id': 1} <class 'dict'>
11:08:13 kwargs,  {'weibo_id': 2} <class 'dict'>
11:08:13 kwargs,  {'weibo_id': 3} <class 'dict'>
11:08:13 kwargs,  {'weibo_id': 4} <class 'dict'>
11:08:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:08:17 完整请求
11:08:17 请求结束
11:09:40 完整请求
11:09:40 请求结束
11:09:40 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:40 path and query /weibo/index {} 
11:09:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:09:40 完整请求
11:09:40 请求结束
11:09:40 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:40 path and query /static {'file': 'gua.js'} 
11:09:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:09:41 完整请求
11:09:41 请求结束
11:09:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:41 path and query /static {'file': 'weibo.js'} 
11:09:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:09:45 完整请求
11:09:45 请求结束
11:09:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:45 path and query /weibo/index {} 
11:09:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:09:45 完整请求
11:09:45 请求结束
11:09:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:45 path and query /static {'file': 'gua.js'} 
11:09:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:09:45 完整请求
11:09:45 请求结束
11:09:45 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:09:45 path and query /static {'file': 'weibo.js'} 
11:09:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:09:47 完整请求
11:09:47 完整请求
11:09:47 请求结束
11:09:47 请求结束
11:10:04 完整请求
11:10:04 请求结束
11:10:04 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:10:04 path and query /weibo/index {} 
11:10:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:10:04 完整请求
11:10:04 请求结束
11:10:04 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:10:04 path and query /static {'file': 'gua.js'} 
11:10:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:10:04 完整请求
11:10:04 请求结束
11:10:04 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:10:04 path and query /static {'file': 'weibo.js'} 
11:10:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-form')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:10:07 完整请求
11:10:07 完整请求
11:10:07 请求结束
11:10:07 请求结束
11:10:17 完整请求
11:10:17 完整请求
11:10:17 请求结束
11:10:17 请求结束
11:11:29 完整请求
11:11:29 请求结束
11:11:29 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:11:29 path and query /weibo/index {} 
11:11:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:11:29 完整请求
11:11:29 请求结束
11:11:29 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:11:29 path and query /static {'file': 'gua.js'} 
11:11:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:11:29 完整请求
11:11:29 请求结束
11:11:29 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:11:29 path and query /static {'file': 'weibo.js'} 
11:11:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList=e('.comment-list')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:11:29 完整请求
11:11:29 请求结束
11:11:29 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:11:29 path and query /api/weibo/all {} 
11:11:29 kwargs,  {'weibo_id': 1} <class 'dict'>
11:11:29 kwargs,  {'weibo_id': 2} <class 'dict'>
11:11:29 kwargs,  {'weibo_id': 3} <class 'dict'>
11:11:29 kwargs,  {'weibo_id': 4} <class 'dict'>
11:11:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:11:32 完整请求
11:11:32 请求结束
11:12:16 完整请求
11:12:16 请求结束
11:12:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:12:16 path and query /weibo/index {} 
11:12:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:12:16 完整请求
11:12:16 请求结束
11:12:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:12:16 path and query /static {'file': 'gua.js'} 
11:12:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:12:16 完整请求
11:12:16 请求结束
11:12:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:12:16 path and query /static {'file': 'weibo.js'} 
11:12:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var  commentList = e('.comment-list')
    commentList.addEventListener('click',function (event) {
        log('aaa')
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:12:16 完整请求
11:12:16 请求结束
11:12:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:12:16 path and query /api/weibo/all {} 
11:12:16 kwargs,  {'weibo_id': 1} <class 'dict'>
11:12:16 kwargs,  {'weibo_id': 2} <class 'dict'>
11:12:16 kwargs,  {'weibo_id': 3} <class 'dict'>
11:12:16 kwargs,  {'weibo_id': 4} <class 'dict'>
11:12:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:12:17 完整请求
11:12:17 请求结束
11:13:16 完整请求
11:13:16 请求结束
11:13:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:13:16 path and query /weibo/index {} 
11:13:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:13:16 完整请求
11:13:16 请求结束
11:13:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:13:16 path and query /static {'file': 'gua.js'} 
11:13:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:13:16 完整请求
11:13:16 请求结束
11:13:16 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:13:16 path and query /static {'file': 'weibo.js'} 
11:13:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" name="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:13:17 完整请求
11:13:17 请求结束
11:13:17 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:13:17 path and query /api/weibo/all {} 
11:13:17 kwargs,  {'weibo_id': 1} <class 'dict'>
11:13:17 kwargs,  {'weibo_id': 2} <class 'dict'>
11:13:17 kwargs,  {'weibo_id': 3} <class 'dict'>
11:13:17 kwargs,  {'weibo_id': 4} <class 'dict'>
11:13:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:13:17 完整请求
11:13:17 请求结束
11:15:00 完整请求
11:15:00 请求结束
11:15:00 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:00 path and query /weibo/index {} 
11:15:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:15:00 完整请求
11:15:00 请求结束
11:15:00 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:00 path and query /static {'file': 'gua.js'} 
11:15:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:15:00 完整请求
11:15:00 请求结束
11:15:00 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:00 path and query /static {'file': 'weibo.js'} 
11:15:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var commentList = e('.weibo-form')
    commentList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){

        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:15:00 完整请求
11:15:00 请求结束
11:15:00 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:00 path and query /api/weibo/all {} 
11:15:00 kwargs,  {'weibo_id': 1} <class 'dict'>
11:15:00 kwargs,  {'weibo_id': 2} <class 'dict'>
11:15:00 kwargs,  {'weibo_id': 3} <class 'dict'>
11:15:00 kwargs,  {'weibo_id': 4} <class 'dict'>
11:15:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:15:02 完整请求
11:15:02 请求结束
11:15:28 完整请求
11:15:28 请求结束
11:15:28 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:28 path and query /weibo/index {} 
11:15:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:15:28 完整请求
11:15:28 请求结束
11:15:28 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:28 path and query /static {'file': 'gua.js'} 
11:15:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:15:28 完整请求
11:15:28 请求结束
11:15:28 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:28 path and query /static {'file': 'weibo.js'} 
11:15:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var commentList = e('.weibo-list')
    commentList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){

        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:15:28 完整请求
11:15:28 请求结束
11:15:28 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:15:28 path and query /api/weibo/all {} 
11:15:28 kwargs,  {'weibo_id': 1} <class 'dict'>
11:15:28 kwargs,  {'weibo_id': 2} <class 'dict'>
11:15:28 kwargs,  {'weibo_id': 3} <class 'dict'>
11:15:28 kwargs,  {'weibo_id': 4} <class 'dict'>
11:15:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:15:32 完整请求
11:15:32 请求结束
11:16:36 完整请求
11:16:36 请求结束
11:16:36 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:16:36 path and query /weibo/index {} 
11:16:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:16:36 完整请求
11:16:36 请求结束
11:16:36 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:16:36 path and query /static {'file': 'gua.js'} 
11:16:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:16:36 完整请求
11:16:36 请求结束
11:16:36 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:16:36 path and query /static {'file': 'weibo.js'} 
11:16:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

var bindEventCommentAdd = function() {
    var commentList = e('.weibo-form')
    commentList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){

        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}

__main()

11:16:36 完整请求
11:16:36 请求结束
11:16:36 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:16:36 path and query /api/weibo/all {} 
11:16:36 kwargs,  {'weibo_id': 1} <class 'dict'>
11:16:36 kwargs,  {'weibo_id': 2} <class 'dict'>
11:16:36 kwargs,  {'weibo_id': 3} <class 'dict'>
11:16:36 kwargs,  {'weibo_id': 4} <class 'dict'>
11:16:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:16:37 完整请求
11:16:37 请求结束
11:23:57 完整请求
11:23:57 请求结束
11:23:57 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:23:57 path and query /weibo/index {} 
11:23:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:23:57 完整请求
11:23:57 请求结束
11:23:57 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:23:57 path and query /static {'file': 'gua.js'} 
11:23:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:23:57 完整请求
11:23:57 请求结束
11:23:57 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:23:57 path and query /static {'file': 'weibo.js'} 
11:23:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

// var bindEventCommentAdd = function() {
//     var commentList = e('.weibo-form')
//     commentList.addEventListener('click', function(event){
//         var self = event.target
//         if(self.classList.contains('comment-add')){
//
//         }
//     })
// }


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}


var bindEventCommentAdd = function() {
    var commentList = e('.weibo-form')
    commentList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){

        }
    })
}


__main()

11:23:57 完整请求
11:23:57 请求结束
11:23:57 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:23:57 path and query /api/weibo/all {} 
11:23:57 kwargs,  {'weibo_id': 1} <class 'dict'>
11:23:57 kwargs,  {'weibo_id': 2} <class 'dict'>
11:23:57 kwargs,  {'weibo_id': 3} <class 'dict'>
11:23:57 kwargs,  {'weibo_id': 4} <class 'dict'>
11:23:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:23:58 完整请求
11:23:58 请求结束
11:28:25 完整请求
11:28:25 请求结束
11:28:25 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:28:25 path and query /weibo/index {} 
11:28:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:28:25 完整请求
11:28:25 请求结束
11:28:25 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:28:25 path and query /static {'file': 'gua.js'} 
11:28:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
11:28:26 完整请求
11:28:26 请求结束
11:28:26 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:28:26 path and query /static {'file': 'weibo.js'} 
11:28:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}

window.onload=function (ev) {

      var bindEventCommentAdd = function() {
        var commentList = e('.weibo-form')
        commentList.addEventListener('click', function(event){
            var self = event.target
            if(self.classList.contains('comment-add')){
                log('aaa')

            }
        })
      }
}



var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}




__main()

11:28:26 完整请求
11:28:26 请求结束
11:28:26 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
11:28:26 path and query /api/weibo/all {} 
11:28:26 kwargs,  {'weibo_id': 1} <class 'dict'>
11:28:26 kwargs,  {'weibo_id': 2} <class 'dict'>
11:28:26 kwargs,  {'weibo_id': 3} <class 'dict'>
11:28:26 kwargs,  {'weibo_id': 4} <class 'dict'>
11:28:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
11:28:28 完整请求
11:28:28 请求结束
15:21:20 完整请求
15:21:20 请求结束
15:21:20 cookie ['']
15:21:20 path and query /favicon.ico {} 
15:21:20 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:21:21 完整请求
15:21:21 请求结束
15:21:21 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:21 path and query /weib/index {} 
15:21:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:21:23 完整请求
15:21:23 请求结束
15:21:23 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:23 path and query /favicon.ico {} 
15:21:23 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:21:31 完整请求
15:21:31 请求结束
15:21:40 完整请求
15:21:40 请求结束
15:21:40 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:40 path and query /weibo/index {} 
15:21:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input name="content">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->
        <!--</div>-->
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:21:40 完整请求
15:21:40 请求结束
15:21:40 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:40 path and query /static {'file': 'gua.js'} 
15:21:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
15:21:41 完整请求
15:21:41 请求结束
15:21:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:41 path and query /static {'file': 'weibo.js'} 
15:21:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class='weibo-list'>
                <div class="weibo-content">[WEIBO]-${content}</div>
                <button class="weibo-delete">删除</button>
                <button class="weibo-edit">编辑</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell,content) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value='${content}'>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target

        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            if(WeiboCell.querySelector('.weibo-edit-form')==null){
                        log('click edit')
                        weibocontent=WeiboCell.querySelector('.weibo-content')
                        content=weibocontent.innerHTML
                        var aa=content.split('-')[1]
                        log(aa)
                        insertEditForm(WeiboCell,aa)
                        weibocontent.style.visibility="hidden"
            }
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            if(input==''){alert('不能为空')}
            else {
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.innerHTML = '[WEIBO]-'+Weibo.content
                contentSpan.style.visibility="visible"
                var weiboedit=WeiboCell.querySelector('.weibo-edit-form')
                weiboedit.remove()
            })
                }
        }
    })
}



var bindEventCommentAdd = function() {
    window.onload=function (ev) {



    var commentList = e('.weibo-form')
    commentList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){

        }
    })
}
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    loadWeibos()
    bindEvents()
}




__main()

15:21:41 完整请求
15:21:41 请求结束
15:21:41 cookie ['Pycharm-aeee5a6a=cdfb9a46-b950-4770-a615-8f366769af1c', 'Pycharm-25dd8cad=258c3c9b-d4db-4a6b-b154-a7be84ee24cb']
15:21:41 path and query /api/weibo/all {} 
15:21:41 kwargs,  {'weibo_id': 1} <class 'dict'>
15:21:41 kwargs,  {'weibo_id': 2} <class 'dict'>
15:21:41 kwargs,  {'weibo_id': 3} <class 'dict'>
15:21:41 kwargs,  {'weibo_id': 4} <class 'dict'>
15:21:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "1111",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "从苍天处取得闪电,从暴君处取得民权",
    "comments": []
  }
]
15:21:41 完整请求
15:21:41 请求结束
22:30:09 完整请求
22:30:09 请求结束
22:30:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:09 path and query / {} 
22:30:09 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


22:30:09 完整请求
22:30:09 请求结束
22:30:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:09 path and query /todo/index {} 
22:30:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:30:09 完整请求
22:30:09 请求结束
22:30:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:09 path and query /static {'file': 'gua.js'} 
22:30:09 完整请求
22:30:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:30:09 请求结束
22:30:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:09 path and query /static {'file': 'todo.js'} 
22:30:09 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:30:10 完整请求
22:30:10 请求结束
22:30:10 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:10 path and query /api/todo/all {} 
22:30:10 完整请求
22:30:10 请求结束
22:30:10 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:10 path and query /favicon.ico {} 
22:30:10 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:30:14 完整请求
22:30:14 请求结束
22:30:14 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:14 path and query /api/todo/add {} {"title":"1111"}
22:30:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "1111",
  "completed": false,
  "ct": 1563805814,
  "ut": 1563805814
}
22:30:31 完整请求
22:30:31 请求结束
22:30:31 完整请求
22:30:31 请求结束
22:30:31 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:31 path and query /api/todo/add {} {"title":"1111"}
22:30:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:31 完整请求
22:30:31 请求结束
22:30:31 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:31 path and query /api/todo/add {} {"title":"1111"}
22:30:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:31 完整请求
22:30:31 请求结束
22:30:31 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:31 path and query /api/todo/add {} {"title":"1111"}
22:30:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:32 完整请求
22:30:32 请求结束
22:30:32 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:32 path and query /api/todo/add {} {"title":"1111"}
22:30:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "1111",
  "completed": false,
  "ct": 1563805832,
  "ut": 1563805832
}
22:30:33 完整请求
22:30:33 请求结束
22:30:33 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:33 path and query /api/todo/delete {'id': '10'} 
22:30:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "1111",
  "completed": false,
  "ct": 1563805832,
  "ut": 1563805832
}
22:30:33 完整请求
22:30:33 请求结束
22:30:33 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:33 path and query /api/todo/delete {'id': '9'} 
22:30:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:34 完整请求
22:30:34 请求结束
22:30:34 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:34 path and query /api/todo/delete {'id': '8'} 
22:30:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:35 完整请求
22:30:35 请求结束
22:30:35 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:35 path and query /api/todo/delete {'id': '7'} 
22:30:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "1111",
  "completed": false,
  "ct": 1563805831,
  "ut": 1563805831
}
22:30:47 完整请求
22:30:47 请求结束
22:30:47 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:47 path and query /todo/index {} 
22:30:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:30:47 完整请求
22:30:47 请求结束
22:30:47 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:47 path and query /static {'file': 'gua.js'} 
22:30:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:30:47 完整请求
22:30:47 请求结束
22:30:47 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:47 path and query /static {'file': 'todo.js'} 
22:30:47 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:30:48 完整请求
22:30:48 请求结束
22:30:48 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:30:48 path and query /api/todo/all {} 
22:30:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:31:07 完整请求
22:31:07 请求结束
22:31:55 完整请求
22:31:55 请求结束
22:31:55 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:31:55 path and query /todo/index {} 
22:31:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:31:55 完整请求
22:31:55 请求结束
22:31:55 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:31:55 path and query /static {'file': 'gua.js'} 
22:31:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:31:55 完整请求
22:31:55 请求结束
22:31:55 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:31:55 path and query /static {'file': 'todo.js'} 
22:31:55 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:31:56 完整请求
22:31:56 请求结束
22:31:56 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:31:56 path and query /api/todo/all {} 
22:32:37 完整请求
22:32:37 请求结束
22:32:37 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:37 path and query /todo/index {} 
22:32:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:32:38 完整请求
22:32:38 请求结束
22:32:38 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:38 path and query /static {'file': 'gua.js'} 
22:32:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:32:38 完整请求
22:32:38 请求结束
22:32:38 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:38 path and query /static {'file': 'todo.js'} 
22:32:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:32:38 完整请求
22:32:38 请求结束
22:32:38 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:38 path and query /api/todo/all {} 
22:32:56 完整请求
22:32:56 请求结束
22:32:56 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:56 path and query /todo/index {} 
22:32:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:32:56 完整请求
22:32:56 请求结束
22:32:56 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:56 path and query /static {'file': 'gua.js'} 
22:32:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:32:56 完整请求
22:32:56 请求结束
22:32:56 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:56 path and query /static {'file': 'todo.js'} 
22:32:56 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:32:57 完整请求
22:32:57 请求结束
22:32:57 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:32:57 path and query /api/todo/all {} 
22:32:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:33:49 完整请求
22:33:49 请求结束
22:34:28 完整请求
22:34:28 请求结束
22:34:28 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:34:28 path and query /todo/index {} 
22:34:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:34:28 完整请求
22:34:28 请求结束
22:34:28 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:34:28 path and query /static {'file': 'gua.js'} 
22:34:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:34:28 完整请求
22:34:28 请求结束
22:34:28 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:34:28 path and query /static {'file': 'todo.js'} 
22:34:28 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:34:29 完整请求
22:34:29 请求结束
22:34:29 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:34:29 path and query /api/todo/all {} 
22:34:29 响应
 [
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:34:57 完整请求
22:34:57 请求结束
22:38:08 完整请求
22:38:08 请求结束
22:38:08 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:08 path and query /todo/index {} 
22:38:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:38:08 完整请求
22:38:08 请求结束
22:38:08 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:08 path and query /static {'file': 'gua.js'} 
22:38:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
            console.log('r.response',r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:38:09 完整请求
22:38:09 请求结束
22:38:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:09 path and query /static {'file': 'todo.js'} 
22:38:09 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:38:09 完整请求
22:38:09 请求结束
22:38:09 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:09 path and query /api/todo/all {} 
22:38:09 响应
 [
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:38:40 完整请求
22:38:40 请求结束
22:38:40 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:40 path and query /todo/index {} 
22:38:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:38:40 完整请求
22:38:40 请求结束
22:38:40 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:40 path and query /static {'file': 'gua.js'} 
22:38:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
            console.log('r.response',r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:38:40 完整请求
22:38:40 请求结束
22:38:40 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:40 path and query /static {'file': 'todo.js'} 
22:38:40 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:38:40 完整请求
22:38:40 请求结束
22:38:40 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:40 path and query /api/todo/all {} 
22:38:40 响应
 [
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:38:52 完整请求
22:38:52 请求结束
22:38:52 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:52 path and query /todo/index {} 
22:38:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>

22:38:52 完整请求
22:38:52 请求结束
22:38:52 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:52 path and query /static {'file': 'gua.js'} 
22:38:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
            console.log('r.response',r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}


// 删除一个 todo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// 增加一个 comment
// var apicommentAdd = function(form, callback) {
//     var path = '/api/comment/add'
//     ajax('POST', path, form, callback)
// }
22:38:52 完整请求
22:38:52 请求结束
22:38:52 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:52 path and query /static {'file': 'todo.js'} 
22:38:52 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
         console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            if(todoCell.querySelector('.todo-edit-form')==null){
                insertEditForm(todoCell)
            }
            // insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:38:53 完整请求
22:38:53 请求结束
22:38:53 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjpudWxsfQ.XSNizQ.fEcSTC06zOhx6wyCh-Ck-rHVNWY']
22:38:53 path and query /api/todo/all {} 
22:38:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1555595914
  },
  {
    "id": 5,
    "title": "0212",
    "completed": false,
    "ct": 1555595810,
    "ut": 1555595815
  },
  {
    "id": 6,
    "title": "1111",
    "completed": false,
    "ct": 1563805814,
    "ut": 1563805814
  }
]
22:40:00 完整请求
22:40:00 请求结束
